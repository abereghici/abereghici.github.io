<theme-toggle class="">
	<button class="" type="button">
		<span class="">Dark Theme</span>
		<svg
			aria-hidden="true"
			class=""
			fill="none"
			focusable="false"
			id="sun-svg"
			viewBox="0 0 24 24"
			xmlns="http://www.w3.org/2000/svg"
		>
			<path
				xmlns="http://www.w3.org/2000/svg"
				d="m12 22c5.5228475 0 10-4.4771525 10-10s-4.4771525-10-10-10-10 4.4771525-10 10 4.4771525 10 10 10zm0-1.5v-17c4.6944204 0 8.5 3.80557963 8.5 8.5 0 4.6944204-3.8055796 8.5-8.5 8.5z"
				fill="currentColor"
			>
			</path>
		</svg>
	</button>
</theme-toggle>

<script>
	// Note that if you fire the theme-change event outside of this component, it will not be reflected in the button's aria-checked attribute. You will need to add an event listener if you want that.
	import { rootInDarkMode } from "@/utils/domElement";

	class ThemeToggle extends HTMLElement {
		connectedCallback() {
			const button = this.querySelector<HTMLButtonElement>("button")!;
			// set aria role value
			button.setAttribute("role", "switch");
			button.setAttribute("aria-checked", String(rootInDarkMode()));

			// button event
			button.addEventListener("click", () => {
				// invert theme
				let themeChangeEvent = new CustomEvent("theme-change", {
					detail: {
						theme: rootInDarkMode() ? "light" : "dark",
					},
				});
				// dispatch event -> ThemeProvider.astro
				document.dispatchEvent(themeChangeEvent);

				// set the aria-checked attribute
				button.setAttribute("aria-checked", String(rootInDarkMode()));
			});
		}
	}

	customElements.define("theme-toggle", ThemeToggle);
</script>
