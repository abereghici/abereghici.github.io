<theme-toggle class="theme-toggle">
	<button class="theme-toggle__button" type="button">
		<span class="sr-only">Dark Theme</span>
	</button>
</theme-toggle>

<script>
	// Note that if you fire the theme-change event outside of this component, it will not be reflected in the button's aria-checked attribute. You will need to add an event listener if you want that.
	import { rootInDarkMode } from "@/utils/domElement";

	class ThemeToggle extends HTMLElement {
		connectedCallback() {
			const button = this.querySelector<HTMLButtonElement>("button")!;
			// set aria role value
			button.setAttribute("role", "switch");
			button.setAttribute("aria-checked", String(rootInDarkMode()));

			// button event
			button.addEventListener("click", () => {
				// invert theme
				let themeChangeEvent = new CustomEvent("theme-change", {
					detail: {
						theme: rootInDarkMode() ? "light" : "dark",
					},
				});
				// dispatch event -> ThemeProvider.astro
				document.dispatchEvent(themeChangeEvent);

				// set the aria-checked attribute
				button.setAttribute("aria-checked", String(rootInDarkMode()));
			});
		}
	}

	customElements.define("theme-toggle", ThemeToggle);
</script>

<style>
	.theme-toggle {
		display: inline-flex;
		padding: var(--spacing-03);

		.theme-toggle__button {
			--size: 20px;
			width: var(--size);
			height: var(--size);
			border-radius: 50%;
			border: 0;
			background: var(--theme-toggle-background);

			@media (prefers-reduced-motion: no-preference) {
				transition:
					background,
					outline-offset 150ms ease;
			}
		}
	}
</style>
