---
import Header from "@/components/Header.astro";
import { SITE_AUTHOR, SITE_TITLE } from "@/consts";
import { cn, formatDate } from "@/lib/utils";
import "@/styles/global.css";
import { ClientRouter } from "astro:transitions";

interface Props {
  title: string;
  description: string;
  articleDate?: Date;
  image?: string;
  className?: string;
}

const { title, description, articleDate, image = "", className } = Astro.props;

const titleSeparator = "â€¢";
const siteTitle = `${title} ${titleSeparator} ${SITE_TITLE}`;
const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const socialImageURL = new URL(
  image ? image : "/static/social-card.jpg",
  Astro.url,
).href;
---

<html lang="en">
  <head>
    <!-- Global Metadata -->
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width,initial-scale=1" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />

    <!-- Font preloads -->
    <link
      rel="preload"
      href="/fonts/geist-variable.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />
    <link
      rel="preload"
      href="/fonts/geist-mono-variable.woff2"
      as="font"
      type="font/woff2"
      crossorigin
    />

    <!-- Canonical URL -->
    <link rel="canonical" href={canonicalURL} />

    <!-- Primary Meta Tags -->
    <title>{siteTitle}</title>
    <meta name="title" content={siteTitle} />
    <meta name="description" content={description} />

    {/* Icons */}
    <link href="/icon.svg" rel="icon" type="image/svg+xml" />
    {
      import.meta.env.PROD && (
        <>
          {/* Favicon & Apple Icon */}
          <link rel="icon" href="/favicon-32x32.png" type="image/png" />
          <link href="/icons/apple-touch-icon.png" rel="apple-touch-icon" />
          {/* Manifest */}
          <link href="/manifest.webmanifest" rel="manifest" />
        </>
      )
    }

    <meta content="" name="theme-color" />

    <!-- Open Graph / Facebook -->
    <meta content={articleDate ? "article" : "website"} property="og:type" />
    <meta content={title} property="og:title" />
    <meta content={description} property="og:description" />
    <meta content={canonicalURL} property="og:url" />
    <meta content={SITE_TITLE} property="og:site_name" />
    <meta content="en-GB" property="og:locale" />
    <meta content={socialImageURL} property="og:image" />
    <meta content="1200" property="og:image:width" />
    <meta content="630" property="og:image:height" />
    {
      articleDate && (
        <>
          <meta content={SITE_AUTHOR} property="article:author" />
          <meta
            content={formatDate(articleDate)}
            property="article:published_time"
          />
        </>
      )
    }
    <!-- Twitter -->
    <meta content="summary_large_image" property="twitter:card" />
    <meta content={canonicalURL} property="twitter:url" />
    <meta content={title} property="twitter:title" />
    <meta content={description} property="twitter:description" />
    <meta content={socialImageURL} property="twitter:image" />

    <!-- Sitemap -->
    <link href="/sitemap-index.xml" rel="sitemap" />

    <!-- RSS auto-discovery -->
    <link
      href="/rss.xml"
      rel="alternate"
      title={SITE_TITLE}
      type="application/rss+xml"
    />

    <meta content={Astro.generator} name="generator" />

    <ClientRouter />
  </head>
  <body class="text-text bg-base font-sans antialiased transition-colors">
    <div class={cn("max-w-xl mx-auto p-4", className)}>
      <Header />
      <slot />
    </div>
  </body>
</html>

<script is:inline>
  const setTheme = () => {
    let theme;

    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      theme = localStorage.getItem("theme");
    } else {
      theme = window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light";
    }

    document.documentElement.classList[theme ? "add" : "remove"](theme);

    if (typeof localStorage !== "undefined") {
      const observer = new MutationObserver(() => {
        const isDark = document.documentElement.classList.contains("dark");
        localStorage.setItem("theme", isDark ? "dark" : "light");
      });
      observer.observe(document.documentElement, {
        attributes: true,
        attributeFilter: ["class"],
      });
    }
  };

  setTheme();

  document.addEventListener("astro:after-swap", setTheme);
</script>
